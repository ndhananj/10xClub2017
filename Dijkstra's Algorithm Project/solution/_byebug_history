quit
c
index_map
c
index_map[val]
index_map[0]
index_map[0].cost
index_map
c
index_map
val
possible_paths[possible_paths.map.keys[0]]
possible_paths.map.keys.first
possible_paths.map.keys[0][cost]
possible_paths.map.keys[0]
possible_paths.map.keys
possible_paths.map
c
q
possible_paths.map
possible_paths.map.keys
possible_paths
c
possible_paths
self
map
@map
c
val.value
val.data
val.cost
val
q
locked_in_paths[vertex]
locked_in_paths
q
data
vertex[0]
vertex[0[
vertex.is_a(Array)
n
min_ins.vertex.in_edges.length
min_ins.in_edges.length
min_ins
min_ins = possible_paths.min_by do |(vertex)| vertex.in_edges.length end
possible_paths.min_by do |(vertex)| vertex.out_edges.length end 
n
vertex
possible_paths
locked_in_paths
s
n
vertex
n
data
n
vertex
data
